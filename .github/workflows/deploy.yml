name: 'Deploy Secure S3 CDK Stack'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: 'Security & Quality Checks'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Git Secrets Scanning
      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        with:
         args: detect --source=. --report-path=gitleaks-report.json --no-git
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # Dependency Vulnerability Scanning
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # NPM Audit
      - name: Run NPM Security Audit
        run: |
          npm audit --audit-level=moderate
          npm audit --output=json > npm-audit-results.json || true

      # Code Quality with SonarQube
      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: sonar-project.properties

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'astrazeneca-secure-s3-cdk'
          path: '.'
          format: 'ALL'
          out: 'dependency-check-reports'
          args: >
            --enableRetired
            --enableExperimental
            --log4jConfigurationFile log4j2.xml

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-reports
          path: dependency-check-reports

  # Linting and Formatting
  code-quality:
    name: 'Code Quality & Formatting'
    runs-on: self-hosted
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run TypeScript compiler check
        run: npx tsc --noEmit

      - name: Check for unused dependencies
        run: npx depcheck --ignores="@types/*,eslint-*,prettier,jest,ts-jest,ts-node"

  # Unit Testing
  test:
    name: 'Unit Tests & Coverage'
    runs-on: self-hosted
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            junit.xml

  # CDK Synthesis and Validation
  cdk-synth:
    name: 'CDK Synthesis & Validation'
    runs-on: self-hosted
    needs: test
    strategy:
      matrix:
        environment: [dev, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: CDK Synthesis
        run: cdk synth --context env=${{ matrix.environment }} --strict

      - name: Upload CDK templates
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates-${{ matrix.environment }}
          path: cdk.out/ 

      - name: Validate CDK templates with cfn-lint
        run: |
          pip install cfn-lint
          find cdk.out -name "*.template.json" -exec cfn-lint {} \;
