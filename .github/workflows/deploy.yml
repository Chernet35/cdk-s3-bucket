name: 'Secure CDK Deployment Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
 
permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  # Reused from nodejs-ci template
  lint:
    name: Lint, Format, and TypeScript Check
    runs-on: self-hosted
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npx eslint . --ext .ts,.tsx --format stylish

      - name: Format check
        run: npx prettier --check "**/*.{ts,tsx,json,md}"

      - name: TypeScript check
        run: npx tsc --noEmit --skipLibCheck

  test:
    name: Unit Tests & Coverage
    runs-on: self-hosted
    timeout-minutes: 15
    needs: lint
    if: ${{ !inputs.skip_tests }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ needs.lint.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml
          retention-days: 30

  synth:
    name: CDK Synthesis & Template Validation
    runs-on: self-hosted
    timeout-minutes: 10
    needs: [lint, test]
    if: always() && (needs.lint.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped'))
    strategy:
      matrix:
        environment: [dev, prod]
    outputs:
      template-hash: ${{ steps.template-hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ needs.lint.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci

      - name: Install AWS CDK
        run: npm install -g aws-cdk@latest

      - name: Synthesize CDK app
        run: |
          cdk synth \
            --context env=${{ matrix.environment }} \
            --output cdk.out/${{ matrix.environment }} \
            --strict \
            --verbose
        env:
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Validate synthesized templates
        run: |
          if ! command -v cfn-lint &> /dev/null; then
            pip3 install --user cfn-lint
          fi
          find cdk.out/${{ matrix.environment }} -name "*.template.json" -exec cfn-lint {} \;

      - name: Generate template hash
        id: template-hash
        run: |
          HASH=$(find cdk.out/${{ matrix.environment }} -name "*.template.json" -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Upload CDK templates
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates-${{ matrix.environment }}
          path: cdk.out/${{ matrix.environment }}/
