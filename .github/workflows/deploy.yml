name: Secure S3 Bucket - Optimized CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'lib/**'
      - 'package.json'
      - 'cdk.json'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20.x'
  PROJECT_ID: 'secure-s3-bucket'
  CDK_VERSION: '2.x'

permissions:
  id-token: write
  contents: read
  security-events: write
  pull-requests: write

jobs:
  setup:
    name: Setup & Validation
    runs-on: self-hosted
    outputs:
      node_cache_key: ${{ steps.node-cache.outputs.cache-key }}
      build_artifacts: ${{ steps.build.outputs.artifacts }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        id: node-cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: |
          npm ci --no-audit --prefer-offline
          npm cache clean --force

      - name: Build project
        id: build
        run: |
          npm run build
          echo "artifacts=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Verify CDK installation
        run: npx cdk --version

  security:
    name: Security Scanning
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Node.js cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Run security scans
        uses: ./.github/actions/security-scans
        with:
          project_id: ${{ env.PROJECT_ID }}
          aws_region: ${{ env.AWS_REGION }}

  test:
    name: Run Tests
    runs-on: self-hosted
    needs: [setup, security]
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Run unit tests
        run: |
          npm ci
          npm test -- --coverage --watchAll=false --maxWorkers=2
          npx nyc report --reporter=lcov

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests-${{ matrix.node }}

  synth:
    name: CDK Synthesis
    runs-on: self-hosted
    needs: [security, test]
    outputs:
      templates: ${{ steps.synth.outputs.templates }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Synthesize templates
        id: synth
        run: |
          npm ci
          npx cdk synth --quiet --all \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=dev \
            --context githubRepo=${{ github.repository }} \
            --output cdk.out
          
          echo "templates=cdk.out" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates
          path: cdk.out/
          retention-days: 1

  deploy:
    name: Deploy to ${{ inputs.environment || 'dev' }}
    runs-on: self-hosted
    needs: synth
    environment:
      name: ${{ inputs.environment || 'dev' }}
      url: https://console.aws.amazon.com/s3/
    strategy:
      matrix:
        environment: ['dev', 'staging', 'prod']
        include:
          - environment: dev
            role: github-oidc-role-dev
            approval: never
          - environment: staging
            role: github-oidc-role-staging
            approval: any-change
          - environment: prod
            role: github-oidc-role-prod
            approval: broadened
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment) ||
      (github.ref == 'refs/heads/develop' && matrix.environment == 'dev') ||
      (github.ref == 'refs/heads/main' && matrix.environment != 'prod') ||
      (github.event_name == 'release' && matrix.environment == 'prod')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: cdk-templates
          path: cdk.out

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ matrix.role }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-${{ matrix.environment }}-${{ github.run_id }}
          mask-aws-account-id: true

      - name: CDK Deploy
        run: |
          npm ci
          npx cdk deploy --all \
            --require-approval ${{ matrix.approval }} \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=${{ matrix.environment }} \
            --context githubRepo=${{ github.repository }} \
            --outputs-file cdk-outputs.json

      - name: Store outputs
        if: success()
        run: |
          echo "DEPLOY_OUTPUTS=$(jq -c . cdk-outputs.json)" >> $GITHUB_ENV
          echo "Bucket created successfully in ${{ matrix.environment }}"

      - name: Post-deployment tests
        run: |
          BUCKET_NAME=$(jq -r '.[] | select(.bucketName) | .bucketName' cdk-outputs.json)
          aws s3api head-bucket --bucket $BUCKET_NAME || exit 1
          aws s3api get-bucket-encryption --bucket $BUCKET_NAME

  notify:
    name: Notification
    runs-on: self-hosted
    needs: deploy
    if: always()
    steps:
      - name: Slack notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL }}
          slack-message: |
            Deployment ${{ job.status }} for ${{ env.PROJECT_ID }} (${{ needs.deploy.result }})
            Environment: ${{ needs.deploy.inputs.environment || 'dev' }}
            Commit: ${{ github.sha }}
            Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
