name: 'Deploy Secure S3 CDK Stack'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  DEPENDENCY_CHECK_VERSION: '8.4.0'

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  setup:
    name: 'Initial Setup'
    runs-on: self-hosted
    outputs:
      node-modules-path: ${{ steps.cache-node.outputs.dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

  security-scan:
    name: 'Security & Vulnerability Scans'
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run Trivy Scan
        id: trivy-scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy fs . --exit-code 0 --format sarif --output trivy-results.sarif --severity CRITICAL,HIGH,MEDIUM
          echo "SARIF_FILE=$(pwd)/trivy-results.sarif" >> $GITHUB_ENV

      - name: Upload Trivy SARIF
        if: steps.trivy-scan.outcome == 'success' && env.SARIF_FILE != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}

      - name: NPM Security Audit
        run: |
          npm audit --audit-level=moderate || true
          npm audit --json > npm-audit-results.json || true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: Setup OWASP Dependency Check
        run: |
          mkdir -p dependency-check-reports
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v${{ env.DEPENDENCY_CHECK_VERSION }}/dependency-check-${{ env.DEPENDENCY_CHECK_VERSION }}-release.zip
          unzip dependency-check-${{ env.DEPENDENCY_CHECK_VERSION }}-release.zip -d dependency-check
          rm dependency-check-${{ env.DEPENDENCY_CHECK_VERSION }}-release.zip

      - name: Run OWASP Dependency Check
        run: |
          ./dependency-check/bin/dependency-check.sh \
            --project "secure-s3-cdk" \
            --scan "." \
            --out "dependency-check-reports" \
            --format "ALL" \
            --enableRetired \
            --enableExperimental \
            --log dependency-check-reports/dependency-check.log

      - name: Upload OWASP Reports
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: dependency-check-reports/*
          retention-days: 7

  lint-check:
    name: 'Lint & Type Check'
    runs-on: self-hosted
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier Format
        run: npm run format:check

      - name: TypeScript Compilation Check
        run: npx tsc --noEmit

      - name: Unused Dependency Check
        run: npx depcheck --ignores="@types/*,eslint-*,prettier,jest,ts-jest,ts-node"

  unit-test:
    name: 'Unit Tests & Coverage'
    runs-on: self-hosted
    needs: lint-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Tests with Coverage
        run: npm run test:coverage

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            junit.xml

  cdk-synth:
    name: 'CDK Synthesis & Validation'
    runs-on: self-hosted
    needs: unit-test
    strategy:
      matrix:
        environment: [dev, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js & Install CDK
        run: |
          npm ci
          npm install -g aws-cdk

      - name: CDK Synthesis
        run: cdk synth --context env=${{ matrix.environment }} --strict

      - name: Validate Synth with cfn-lint
        run: |
          pip install cfn-lint
          find cdk.out -name "*.template.json" -exec cfn-lint {} \;

      - name: Upload CDK Output
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates-${{ matrix.environment }}
          path: cdk.out/
