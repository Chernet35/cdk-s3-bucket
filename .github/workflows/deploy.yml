name: 'Secure CDK Deployment Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  TRIVY_VERSION: '0.50.0'
  GITLEAKS_VERSION: '8.24.3'

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: 'Security Scanning'
    runs-on: self-hosted
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Clean & Update System
        run: |
          sudo pkill -f dpkg || true
          sudo rm -rf /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock*
          echo 'DPkg::Lock::Timeout "120";' | sudo tee /etc/apt/apt.conf.d/100-timeout
          sudo apt-get update -y

      - name: Install Essential Tools
        run: |
          sudo apt-get install -y \
            ca-certificates curl wget unzip jq gnupg software-properties-common \
            lsb-release apt-transport-https tar

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci --no-audit --prefer-offline

      - name: Run npm Audit (Critical Only)
        run: |
          npm audit --omit=dev --audit-level=critical --json > npm-audit-results.json || true
          if jq -e '.metadata.vulnerabilities.critical > 0' npm-audit-results.json; then
            echo "CRITICAL_VULNERABILITIES=1" >> $GITHUB_ENV
            echo "Critical vulnerabilities found!"
            exit 1
          fi

      - name: Install Trivy
        run: |
          wget -q https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
          tar zxvf trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ env.TRIVY_VERSION }}
          restore-keys: |
            trivy-db-

      - name: Run Trivy FS Scan
        run: |
          trivy fs --exit-code 1 --severity CRITICAL,HIGH --format sarif --output trivy-results.sarif .

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Install Gitleaks Manually
        run: |
         curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v${{ env.GITLEAKS_VERSION }}/gitleaks_${{ env.GITLEAKS_VERSION }}_linux_x64.tar.gz -o gitleaks.tar.gz
         tar -xzf gitleaks.tar.gz
         sudo mv gitleaks /usr/local/bin/

         - name: Run Gitleaks Secret Scan
             run: |
           gitleaks detect --source . \
          --report-path gitleaks-report.json \
          --report-format json || {
          echo "Secrets detected by Gitleaks!"
          exit 1
            }

