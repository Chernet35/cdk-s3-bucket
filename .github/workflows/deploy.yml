name: 'Enterprise CDK Deployment Pipeline'

on:
  push:
    branches: [main, develop]
    paths-ignore: ['**.md', 'docs/**', '.gitignore']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options: ['dev', 'staging', 'prod']
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run only'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'
  CDK_VERSION: '2.150.0'
  NODE_OPTIONS: '--max-old-space-size=4096'
  SECURITY_THRESHOLD: 'high' # Set to 'critical' to only fail on critical vulnerabilities

permissions:
  id-token: write
  contents: read
  actions: read
  pull-requests: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  validate:
    name: 'Validation'
    runs-on: [self-hosted, linux]
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache.outputs.key }}
      deploy-dev: ${{ steps.env.outputs.dev }}
      deploy-prod: ${{ steps.env.outputs.prod }}
      security-status: ${{ steps.security-audit.outputs.status }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Environment logic
        id: env
        run: |
          DEV="false"; PROD="false"
          [[ "${{ github.ref }}" == "refs/heads/develop" || "${{ inputs.environment }}" == "dev" ]] && DEV="true"
          [[ "${{ inputs.environment }}" == "prod" || "${{ contains(github.event.head_commit.message, '[deploy-prod]') }}" == "true" ]] && PROD="true"
          echo "dev=$DEV" >> $GITHUB_OUTPUT
          echo "prod=$PROD" >> $GITHUB_OUTPUT

      - name: Setup cache
        id: cache
        run: |
          KEY="deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('package-lock.json') }}"
          echo "key=$KEY" >> $GITHUB_OUTPUT

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ steps.cache.outputs.key }}
          restore-keys: deps-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci --silent --no-audit --no-fund

      - name: Enhanced Security Audit
        id: security-audit
        continue-on-error: true
        run: |
          # Run audit and capture output
          npm audit --audit-level=${{ env.SECURITY_THRESHOLD }} --json > audit.json 2>/dev/null || AUDIT_EXIT=$?
          
          # Check if audit.json exists and has content
          if [[ -f "audit.json" && -s "audit.json" ]]; then
            CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit.json)
            HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit.json)
            
            # Create security report
            echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
            echo "**Critical:** $CRITICAL | **High:** $HIGH" >> $GITHUB_STEP_SUMMARY
            
            # Output vulnerability details
            VULNS=$(jq -r '.vulnerabilities[] | "\(.severity): \(.name)@\(.range) - \(.title)"' audit.json 2>/dev/null || true)
            if [[ -n "$VULNS" ]]; then
              echo -e "\n### Vulnerabilities Found:" >> $GITHUB_STEP_SUMMARY
              echo "$VULNS" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Only fail if we have vulnerabilities at our threshold level
            if [[ "${{ env.SECURITY_THRESHOLD }}" == "critical" && $CRITICAL -gt 0 ]] || \
               [[ "${{ env.SECURITY_THRESHOLD }}" == "high" && $((CRITICAL + HIGH)) -gt 0 ]]; then
              echo "status=failure" >> $GITHUB_OUTPUT
              echo "Found $CRITICAL critical and $HIGH high vulnerabilities"
              exit 1
            else
              echo "status=success" >> $GITHUB_OUTPUT
              echo "No ${{ env.SECURITY_THRESHOLD }} vulnerabilities found"
            fi
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "No vulnerabilities found or audit completed successfully"
          fi

      - name: Lint and format
        run: |
          npx eslint . --ext .ts,.tsx --max-warnings 5
          npx prettier --check "**/*.{ts,tsx,json,md}" --write=false
          npx tsc --noEmit --skipLibCheck

  test:
    name: 'Tests'
    runs-on: self-hosted
    timeout-minutes: 15
    needs: validate
    if: ${{ !inputs.skip_tests && needs.validate.outputs.security-status != 'failure' }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Install dependencies
        run: npm ci --silent --no-audit --no-fund

      - name: Run tests
        run: |
          npm run test:coverage
          COVERAGE=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)
          echo "Coverage: $COVERAGE%"
          (( $(echo "$COVERAGE < 80" | bc -l) )) && exit 1 || true

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}

  synth:
    name: 'CDK Synth (${{ matrix.env }})'
    runs-on: self-hosted
    timeout-minutes: 10
    needs: [validate, test]
    if: always() && needs.validate.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    strategy:
      matrix:
        env: [dev, prod]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.validate.outputs.cache-key }}

      - name: Install dependencies
        run: |
          npm ci --silent --no-audit --no-fund
          npm install -g aws-cdk@${{ env.CDK_VERSION }}

      - name: CDK synth
        run: |
          cdk synth \
            --context env=${{ matrix.env }} \
            --output cdk.out/${{ matrix.env }} \
            --strict

      - name: Validate templates
        run: |
          pip3 install --user cfn-lint
          find cdk.out/${{ matrix.env }} -name "*.template.json" -exec cfn-lint {} \;

      - name: Upload templates
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates-${{ matrix.env }}
          path: cdk.out/${{ matrix.env }}/
          retention-days: 30
