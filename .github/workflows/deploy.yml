name: 'Secure S3 Bucket - CI/CD Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for checkout
  security-events: write  # Required for security scanning
  pull-requests: write    # Required for PR comments

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  PROJECT_ID: 'astrazeneca-secure-s3'

jobs:
  # Security and Code Quality Jobs
  security-scan:
    name: 'Security Scanning'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ env.PROJECT_ID }}
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-reports
          path: reports/

  code-quality:
    name: 'Code Quality & Linting'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run TypeScript compiler check
        run: npm run type-check

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Testing Jobs
  unit-tests:
    name: 'Unit Tests'
    runs-on: self-hosted
    needs: [security-scan, code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  # CDK Synthesis and Validation
  cdk-synth:
    name: 'CDK Synthesis & Validation'
    runs-on: self-hosted
    needs: [unit-tests]
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: CDK Synthesis
        run: |
          cdk synth --all \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=${{ matrix.environment }} \
            --context githubRepo=${{ github.repository }}

      - name: Upload CloudFormation templates
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates-${{ matrix.environment }}
          path: cdk.out/

      - name: Validate CloudFormation templates
        run: |
          for template in cdk.out/*.template.json; do
            aws cloudformation validate-template --template-body file://"$template" --region ${{ env.AWS_REGION }} || true
          done

  # Development Environment Deployment
  deploy-dev:
    name: 'Deploy to Development'
    runs-on: self-hosted
    needs: [cdk-synth]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    environment:
      name: dev
      url: https://console.aws.amazon.com/s3/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_ID }}-github-oidc-role-dev
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Dev-${{ github.run_id }}

      - name: CDK Bootstrap (if needed)
        run: |
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=dev

      - name: CDK Diff
        id: diff
        run: |
          echo "## CDK Diff Output" >> diff_output.md
          echo '```' >> diff_output.md
          cdk diff --all \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=dev \
            --context githubRepo=${{ github.repository }} >> diff_output.md || true
          echo '```' >> diff_output.md

      - name: Comment PR with diff
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const diffOutput = fs.readFileSync('diff_output.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: diffOutput
            });

      - name: CDK Deploy
        run: |
          cdk deploy --all --require-approval never \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=dev \
            --context githubRepo=${{ github.repository }}

      - name: Run post-deployment tests
        run: |
          # Add integration tests here
          echo "Running post-deployment validation..."
          aws s3 ls s3://${{ env.PROJECT_ID }}-secure-bucket-dev-${{ secrets.AWS_ACCOUNT_ID }} || echo "Bucket verification completed"

  # Staging Environment Deployment
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: self-hosted
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://console.aws.amazon.com/s3/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_ID }}-github-oidc-role-staging
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Staging-${{ github.run_id }}

      - name: CDK Bootstrap (if needed)
        run: |
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=staging

      - name: CDK Diff and Security Check
        run: |
          cdk diff --all \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=staging \
            --context githubRepo=${{ github.repository }}

      - name: CDK Deploy
        run: |
          cdk deploy --all --require-approval never \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=staging \
            --context githubRepo=${{ github.repository }}

      - name: Run staging tests
        run: |
          echo "Running staging environment tests..."
          # Add comprehensive staging tests here

  # Production Environment Deployment
  deploy-prod:
    name: 'Deploy to Production'
    runs-on: self-hosted
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment:
      name: prod
      url: https://console.aws.amazon.com/s3/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_ID }}-github-oidc-role-prod
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Prod-${{ github.run_id }}

      - name: CDK Bootstrap (if needed)
        run: |
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=prod

      - name: Pre-deployment Security Validation
        run: |
          echo "Running final security checks before production deployment..."
          # Add additional security validations
          
      - name: CDK Diff with Change Detection
        id: prod-diff
        run: |
          DIFF_OUTPUT=$(cdk diff --all \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=prod \
            --context githubRepo=${{ github.repository }} 2>&1)
          
          echo "diff_output<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check for critical changes that shouldn't be automated
          if echo "$DIFF_OUTPUT" | grep -E "(DELETE|REPLACE)" | grep -v "AWS::CloudFormation::Stack"; then
            echo "::error::Critical infrastructure changes detected. Manual review required."
            exit 1
          fi

      - name: CDK Deploy to Production
        run: |
          cdk deploy --all --require-approval never \
            --context projectId=${{ env.PROJECT_ID }} \
            --context environment=prod \
            --context githubRepo=${{ github.repository }}

      - name: Post-deployment Production Tests
        run: |
          echo "Running production readiness tests..."
          # Add production-specific validation tests
          aws s3 ls s3://${{ env.PROJECT_ID }}-secure-bucket-prod-${{ secrets.AWS_ACCOUNT_ID }}

      - name: Notify Teams
        if: success()
        run: |
          echo "Production deployment completed successfully!"
          # Add notification logic (Slack, Teams, etc.)

  # Cleanup Job for Failed Deployments
  cleanup:
    name: 'Cleanup on Failure'
    runs-on: self-hosted
    if: failure()
    needs: [deploy-dev, deploy-staging, deploy-prod]
    steps:
      - name: Cleanup failed resources
        run: |
          echo "Cleaning up any partially deployed resources..."
          # Add cleanup logic if needed
