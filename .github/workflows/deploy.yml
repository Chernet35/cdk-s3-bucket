name: 'Secure S3 CDK Deployment Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  GITLEAKS_VERSION: '8.24.3'
  DEPENDENCY_CHECK_VERSION: '8.4.0'
  TRIVY_VERSION: '0.50.1'
  BIN_DIR: '$HOME/.local/bin'  # Using user-local bin directory to avoid permission issues

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  setup:
    name: 'Initial Setup'
    runs-on: self-hosted
    outputs:
      node-modules-path: ${{ steps.cache-node.outputs.dir }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

  security-scan:
    name: 'Security Scans'
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Gitleaks
        run: |
          mkdir -p "$HOME/.gitleaks"
          curl -sSL "https://github.com/zricethezav/gitleaks/releases/download/v${{ env.GITLEAKS_VERSION }}/gitleaks_${{ env.GITLEAKS_VERSION }}_linux_x64.tar.gz" \
            -o "$HOME/.gitleaks/gitleaks.tar.gz"
          tar -xzf "$HOME/.gitleaks/gitleaks.tar.gz" -C "$HOME/.gitleaks"
          chmod +x "$HOME/.gitleaks/gitleaks"
          echo "$HOME/.gitleaks" >> $GITHUB_PATH

      - name: Run Gitleaks Scan
        run: |
          "$HOME/.gitleaks/gitleaks" detect --source=. --report-path=security-reports/gitleaks-report.json --report-format=json --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Trivy (User-local Installation)
        run: |
          mkdir -p "${{ env.BIN_DIR }}"
          curl -sfL "https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz" | \
            tar -xz -C "${{ env.BIN_DIR }}" trivy
          chmod +x "${{ env.BIN_DIR }}/trivy"
          echo "${{ env.BIN_DIR }}" >> $GITHUB_PATH

      - name: Run Trivy Scan
        id: trivy-scan
        run: |
          mkdir -p security-reports
          trivy fs . \
            --exit-code 0 \
            --format sarif \
            --output security-reports/trivy-results.sarif \
            --severity CRITICAL,HIGH,MEDIUM
          echo "SARIF_FILE=$(pwd)/security-reports/trivy-results.sarif" >> $GITHUB_ENV

      - name: Upload Trivy SARIF
        if: steps.trivy-scan.outcome == 'success' && env.SARIF_FILE != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}

      - name: NPM Security Audit
        run: |
          mkdir -p security-reports
          npm audit --audit-level=moderate || true
          npm audit --json > security-reports/npm-audit-results.json || true

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: Setup OWASP Dependency Check
        run: |
          mkdir -p dependency-check
          wget -q "https://github.com/jeremylong/DependencyCheck/releases/download/v${{ env.DEPENDENCY_CHECK_VERSION }}/dependency-check-${{ env.DEPENDENCY_CHECK_VERSION }}-release.zip" -O dependency-check.zip
          unzip -q dependency-check.zip -d dependency-check
          rm dependency-check.zip

      - name: Run OWASP Dependency Check
        run: |
          mkdir -p security-reports/dependency-check
          ./dependency-check/bin/dependency-check.sh \
            --project "secure-s3-cdk" \
            --scan "." \
            --out "security-reports/dependency-check" \
            --format "ALL" \
            --enableRetired \
            --enableExperimental \
            --log security-reports/dependency-check.log

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: security-reports/*
          retention-days: 7

  # Remaining jobs (lint-check, unit-test, cdk-synth) remain unchanged from previous optimized version
