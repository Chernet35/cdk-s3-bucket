name: 'Deploy Secure S3 CDK Stack'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'
  SONAR_SCANNER_VERSION: '4.8.0.2856'

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: 'Security & Quality Checks'
    runs-on: self-hosted
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build environment
        run: |
          chmod +x scripts/*.sh
          ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies with optimization
        run: |
          ./scripts/install-deps.sh

      # Git Secrets Scanning with Gitleaks
      - name: Run Gitleaks Secret Scanning
        run: |
          ./scripts/security-scan.sh gitleaks
        continue-on-error: false

      - name: Upload Gitleaks SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/security/gitleaks-results.sarif') != ''
        with:
          sarif_file: 'reports/security/gitleaks-results.sarif'
          category: 'gitleaks'

      # Dependency Vulnerability Scanning
      - name: Run Trivy Vulnerability Scanner
        run: |
          ./scripts/security-scan.sh trivy
        continue-on-error: true

      - name: Upload Trivy SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/security/trivy-results.sarif') != ''
        with:
          sarif_file: 'reports/security/trivy-results.sarif'
          category: 'trivy'

      # NPM Security Audit
      - name: Run NPM Security Audit
        run: |
          ./scripts/security-scan.sh npm-audit
        continue-on-error: true

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        run: |
          ./scripts/owasp-scan.sh
        continue-on-error: true
        env:
          CVSS_THRESHOLD: "7.0"
          OWASP_TIMEOUT: "900"

      - name: Upload OWASP Dependency Check Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: owasp-dependency-check-reports
          path: |
            reports/security/owasp/
            !reports/security/owasp/data/
          retention-days: 30

      - name: Upload OWASP SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/security/owasp/dependency-check-report.sarif') != ''
        with:
          sarif_file: 'reports/security/owasp/dependency-check-report.sarif'
          category: 'owasp-dependency-check'

      # SonarQube Code Quality Analysis
      - name: Run SonarQube Analysis
        run: |
          ./scripts/sonar-scan.sh
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL || 'https://sonarcloud.io' }}
          SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION || 'astrazeneca' }}

      - name: Upload SonarQube Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonarqube-reports
          path: |
            reports/sonar/
            .scannerwork/
          retention-days: 30

      # Comprehensive Security Summary
      - name: Generate Security Summary
        run: |
          ./scripts/security-scan.sh summary
        if: always()

      - name: Upload All Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-reports
          path: |
            reports/security/
            logs/
          retention-days: 30

  # Code Quality and Linting
  code-quality:
    name: 'Code Quality & Formatting'
    runs-on: self-hosted
    timeout-minutes: 15
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          chmod +x scripts/*.sh
          ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: ./scripts/install-deps.sh

      - name: Run comprehensive code quality checks
        run: |
          ./scripts/code-quality.sh

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports
          path: reports/code-quality/
          retention-days: 30

  # Unit Testing with Coverage
  test:
    name: 'Unit Tests & Coverage'
    runs-on: self-hosted
    timeout-minutes: 20
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          chmod +x scripts/*.sh
          ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: ./scripts/install-deps.sh

      - name: Run optimized test suite
        run: |
          ./scripts/run-tests.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            reports/tests/
          retention-days: 30

  # CDK Synthesis and Validation
  cdk-synth:
    name: 'CDK Synthesis & Validation'
    runs-on: self-hosted
    timeout-minutes: 15
    needs: test
    strategy:
      matrix:
        environment: [dev, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          chmod +x scripts/*.sh
          ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: ./scripts/install-deps.sh

      - name: CDK Synthesis and Validation
        run: |
          ./scripts/cdk-synth.sh ${{ matrix.environment }}

      - name: Upload CDK templates
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates-${{ matrix.environment }}
          path: |
            cdk.out/
            reports/cdk/
          retention-days: 30

 
