name: 'Secure CDK Deployment Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      skip_tests:
        description: 'Skip tests (true/false)'
        required: false
        default: 'false'

env:
  NODE_VERSION: 20
  AWS_REGION: us-east-1
  CDK_ENV_DEV: '966302817492/us-east-1'       # replace with actual dev account/region
  CDK_ENV_PROD: '966302817492/us-east-1'      # replace with actual prod account/region

permissions:
  id-token: write
  contents: read

jobs:

  code-quality:
    name: 'Lint, Test, Security Scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compile check
        run: npx tsc --noEmit

      - name: Lint (ESLint)
        run: npx eslint . --ext .ts --max-warnings=0 || true

      - name: Run Unit Tests
        if: ${{ github.event.inputs.skip_tests != 'true' }}
        run: npm test

      - name: Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
        continue-on-error: false

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'HIGH,CRITICAL'

  synth-and-lint:
    name: 'CDK Synth and CFN Lint'
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: CDK Synth
        run: npx cdk synth > synthesized.template.json

      - name: Install cfn-lint
        run: pip3 install cfn-lint

      - name: Validate synthesized CloudFormation template
        run: |
          if grep -q '"Resources"' synthesized.template.json; then
            echo "✅ Template is valid. Running cfn-lint..."
            cfn-lint --ignore-checks W2001 synthesized.template.json
          else
            echo "❌ ERROR: No 'Resources' block found in the template."
            cat synthesized.template.json
            exit 1
          fi

  deploy:
    name: 'Deploy CDK to ${{ github.event.inputs.environment || 'dev' }}'
    runs-on: ubuntu-latest
    needs: synth-and-lint
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets[format('AWS_ACCOUNT_ID_{0}', github.event.inputs.environment || 'DEV')] }}:role/GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Node.js & Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci

      - name: CDK Bootstrap (if needed)
        run: npx cdk bootstrap aws://$CDK_ENV_DEV

      - name: CDK Deploy
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          if [ "$ENVIRONMENT" = "prod" ]; then
            ACCOUNT_ENV=${CDK_ENV_PROD}
          else
            ACCOUNT_ENV=${CDK_ENV_DEV}
          fi
          npx cdk deploy --require-approval never --all -c env=$ENVIRONMENT

