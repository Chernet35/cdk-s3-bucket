name: 'Deploy Secure S3 CDK Stack'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'
  SONAR_SCANNER_VERSION: '4.8.0.2856'

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: 'Security & Quality Checks'
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup build environment
        run: |
          ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies with optimization
        run: |
          ./scripts/install-deps.sh

      # Git Secrets Scanning
      - name: Run Gitleaks Scan
        run: |
          ./scripts/security-scan.sh gitleaks

      - name: Upload Gitleaks scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/security/gitleaks-results.sarif') != ''
        with:
          sarif_file: 'reports/security/gitleaks-results.sarif'
          category: 'gitleaks'

      # Dependency Vulnerability Scanning
      - name: Run Trivy Vulnerability Scanner
        run: |
          ./scripts/security-scan.sh trivy

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/security/trivy-results.sarif') != ''
        with:
          sarif_file: 'reports/security/trivy-results.sarif'
          category: 'trivy'

      # NPM Audit
      - name: Run NPM Security Audit
        run: |
          ./scripts/security-scan.sh npm-audit

      # Code Quality with SonarQube
      - name: SonarQube Scan
        run: |
          ./scripts/security-scan.sh sonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        run: |
          ./scripts/security-scan.sh owasp || echo "OWASP scan completed with warnings"

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-reports
      - name: Upload Semgrep scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('reports/security/semgrep-results.sarif') != ''
        with:
          sarif_file: 'reports/security/semgrep-results.sarif'
          category: 'semgrep'
  # Linting and Formatting
  code-quality:
    name: 'Code Quality & Formatting'
    runs-on: self-hosted
    timeout-minutes: 15
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with optimization
        run: ./scripts/install-deps.sh

      - name: Run code quality checks
        run: |
          ./scripts/security-scan.sh code-quality

  # Unit Testing
  test:
    name: 'Unit Tests & Coverage'
    runs-on: self-hosted
    timeout-minutes: 20
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with optimization
        run: ./scripts/install-deps.sh

      - name: Run optimized tests
        run: |
          ./scripts/run-tests.sh

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            junit.xml

  # CDK Synthesis and Validation
  cdk-synth:
    name: 'CDK Synthesis & Validation'
    runs-on: self-hosted
    timeout-minutes: 15
    needs: test
    strategy:
      matrix:
        environment: [dev, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: ./scripts/setup-build-env.sh

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies with optimization
        run: ./scripts/install-deps.sh

      - name: CDK Synthesis and Validation
        run: |
          ./scripts/cdk-synth.sh ${{ matrix.environment }}

      - name: Upload CDK templates
        uses: actions/upload-artifact@v4
        with:
          name: cdk-templates-${{ matrix.environment }}
          path: cdk.out/
